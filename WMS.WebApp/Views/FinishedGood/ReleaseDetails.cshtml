@model WMS.Domain.DTOs.GIV_FinishedGood.Web.FG_ReleaseDetailsViewDto
@{
    ViewData["Title"] = "Finished Good Release Details";
}
@Html.AntiForgeryToken()

<div class="card p-3 mb-4">
    <div class="flex justify-between items-center">
        <div>
            <h4>Release Details</h4>
            <p><strong>SKU:</strong> @Model.SKU - @Model.Description</p>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-3">
                <div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Release Date</p>
                    <p class="font-semibold">@Model.ReleaseDate.ToString("yyyy-MM-dd HH:mm")</p>
                </div>
                <div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Released By</p>
                    <p class="font-semibold">@Model.ReleasedByDisplay</p>
                </div>
                <div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Status</p>
                    <span class="@(Model.StatusText switch {
                        "Completed" => "status-completed",
                        "Partially Released" => "status-partial",
                        "Due for Release" => "status-due",
                        _ => "status-scheduled"
                    })">@Model.StatusText</span>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(Model.Remarks))
            {
                <div class="mt-3">
                    <p class="text-sm text-gray-600 dark:text-gray-400">Remarks</p>
                    <p class="font-medium">@Model.Remarks</p>
                </div>
            }
        </div>
        <div class="flex gap-2">
            <a href="@Url.Action("Releases", new { id = Model.FinishedGoodId })" class="btn btn-secondary">
                <iconify-icon icon="lucide:arrow-left"></iconify-icon>
                Back to Releases
            </a>
            <a href="@Url.Action("Details", new { id = Model.FinishedGoodId })" class="btn btn-info">
                <iconify-icon icon="lucide:package"></iconify-icon>
                SKU Details
            </a>
        </div>
    </div>
</div>
<!-- Item Codes Modal – copied 1‑to‑1 from Raw‑Material version -->
<div id="itemCodesModal"
     class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md
                bg-white dark:bg-gray-800">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">All Item Codes in Pallet</h3>
                <button type="button"
                        class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                        onclick="closeItemCodesModal()">
                    <iconify-icon icon="lucide:x" class="text-xl"></iconify-icon>
                </button>
            </div>

            <div class="max-h-96 overflow-y-auto">
                <div id="itemCodesContent"
                     class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2"></div>
            </div>

            <div class="flex justify-between items-center mt-4 pt-4 border-t
                        border-gray-200 dark:border-gray-600">
                <span id="itemCodesCount"
                      class="text-sm text-gray-600 dark:text-gray-400"></span>
                <button type="button"
                        class="btn btn-secondary"
                        onclick="closeItemCodesModal()">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
    <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
        <div class="flex items-center">
            <iconify-icon icon="lucide:package" class="text-blue-600 text-2xl mr-3"></iconify-icon>
            <div>
                <p class="text-sm text-blue-600 dark:text-blue-400">Entire Pallets</p>
                <p class="text-2xl font-bold text-blue-800 dark:text-blue-200">@Model.EntirePalletCount</p>
                <p class="text-xs text-blue-600 dark:text-blue-400">@Model.ReleasedPallets released</p>
            </div>
        </div>
    </div>

    <div class="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
        <div class="flex items-center">
            <iconify-icon icon="lucide:box" class="text-green-600 text-2xl mr-3"></iconify-icon>
            <div>
                <p class="text-sm text-green-600 dark:text-green-400">Individual Items</p>
                <p class="text-2xl font-bold text-green-800 dark:text-green-200">@Model.IndividualItemCount</p>
                <p class="text-xs text-green-600 dark:text-green-400">@Model.ReleasedItems released</p>
            </div>
        </div>
    </div>

    <div class="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg">
        <div class="flex items-center">
            <iconify-icon icon="lucide:clock" class="text-orange-600 text-2xl mr-3"></iconify-icon>
            <div>
                <p class="text-sm text-orange-600 dark:text-orange-400">Pending</p>
                <p class="text-2xl font-bold text-orange-800 dark:text-orange-200">@((Model.TotalPallets + Model.TotalItems) - (Model.ReleasedPallets + Model.ReleasedItems))</p>
                <p class="text-xs text-orange-600 dark:text-orange-400">items remaining</p>
            </div>
        </div>
    </div>

    @if (Model.ActualReleaseDate.HasValue)
    {
        <div class="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
            <div class="flex items-center">
                <iconify-icon icon="lucide:check-circle" class="text-purple-600 text-2xl mr-3"></iconify-icon>
                <div>
                    <p class="text-sm text-purple-600 dark:text-purple-400">Completed</p>
                    <p class="text-sm font-bold text-purple-800 dark:text-purple-200">@Model.ActualReleaseDate.Value.ToString("MMM dd, yyyy")</p>
                    <p class="text-xs text-purple-600 dark:text-purple-400">by @Model.ActualReleasedBy</p>
                </div>
            </div>
        </div>
    }
</div>

<div class="card">
    <div class="card-header">
        <h5 class="card-title">Release Items</h5>
    </div>
    <div class="card-body">
        <table id="release-details-table" class="table table-striped" data-release-id="@Model.Id">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Pallet Code</th>
                    <th>Item Code(s)</th>
                    <th>Batch No</th>
                    <th>Location</th>
                    <th>Received Date</th>
                    <th>Pack Size</th>
                    <th>Status</th>
                    <th>Release Info</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const releaseId = document.getElementById("release-details-table").dataset.releaseId;
            const token = $('input[name="__RequestVerificationToken"]').val();
            const isDarkMode = document.documentElement.classList.contains('dark') || document.body.classList.contains('dark');

            $('#release-details-table').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: `/FinishedGood/GetPaginatedReleaseDetails?releaseId=${releaseId}`,
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'X-CSRF-TOKEN': token,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    data: function (d) {
                        return JSON.stringify(d);
                    },
                    error: function (xhr, error) {
                        console.error('Failed to load release details:', error);
                    }
                },
                columns: [
    {
        data: 'typeText',
        render: (data, type, row) => {
            const icon = row.isEntirePallet ? 'lucide:package' : 'lucide:box';
            const color = row.isEntirePallet ? 'text-blue-600' : 'text-green-600';
            return `
                <div class="flex items-center">
                    <iconify-icon icon="${icon}" class="${color} mr-2"></iconify-icon>
                    <span class="${color} font-medium">${data}</span>
                </div>`;
        }
    },
    {
        data: 'palletCode',
        render: d =>
            `<span class="font-mono text-sm bg-gray-100 dark:bg-gray-700
                       px-2 py-1 rounded">${d}</span>`
    },

    /* ---------- Item Code(s) column --------- */
    {
        data: 'itemCodesDisplay',
        render: function (data, type, row) {
            // identical rules as RM version
            if (data === '-') return '<span class="text-muted">-</span>';

            if (row.isEntirePallet && row.allItemCodes?.length) {
                const count = row.allItemCodes.length;

                if (count === 1)
                    return badge(row.allItemCodes[0]);

                if (count <= 3)
                    return `
                        <div class="item-codes-container">
                            ${row.allItemCodes.map(c => badgeSmall(c)).join('')}
                        </div>`;

                // many items – summary + “View All”
                return `
                    <div class="item-codes-summary">
                        <div class="flex items-center gap-2">
                            <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200
                                         px-2 py-1 rounded text-sm font-medium">
                                ${count} Items
                            </span>
                            <button class="btn-link text-xs text-blue-600 hover:text-blue-800"
                                    onclick="showItemCodes('${row.id}',
                                                            ${JSON.stringify(row.allItemCodes)
                                                                .replace(/"/g, '&quot;')})">
                                <iconify-icon icon="lucide:eye" class="mr-1"></iconify-icon>View All
                            </button>
                        </div>
                        <div class="text-xs text-gray-500 mt-1">
                            ${row.allItemCodes.slice(0, 2).join(', ')}...
                        </div>
                    </div>`;
            }

            // individual‑item release
            return badge(data);

            function badge(content) {
                return `<span class="font-mono text-sm bg-gray-100 dark:bg-gray-700
                                   px-2 py-1 rounded">${content}</span>`;
            }
            function badgeSmall(content) {
                return `<span class="font-mono text-xs bg-gray-100 dark:bg-gray-700
                                   px-1 py-0.5 rounded mr-1 mb-1 inline-block">${content}</span>`;
            }
        }
    },

    { data: 'batchNo' },

    {
        data: 'locationCode',
        render: d => d
            ? `<span class="font-mono text-sm">${d}</span>`
            : '<span class="text-muted">-</span>'
    },
    {
        data: 'receivedDate',
        render: d => new Date(d).toLocaleDateString()
    },
    { data: 'packSize' },

    /* ---------- Status column ---------- */
    {
        data: 'statusText',
        render: (d, t, row) =>
            `<span class="${row.statusClass}">${d}</span>`
    },

    /* ---------- Release Info column ---------- */
    {
        data: null,
        orderable: false,
        searchable: false,
        render: function (data, type, row) {
            if (row.isActuallyReleased) {
                const dt = new Date(row.actualReleaseDate);
                return `
                    <div class="text-sm">
                        <div class="font-medium text-green-600">
                            ${row.actualReleasedBy}
                        </div>
                        <div class="text-gray-500">
                            ${dt.toLocaleDateString()} ${dt.toLocaleTimeString()}
                        </div>
                    </div>`;
            }
            return '<span class="text-muted">Not released yet</span>';
        }
    }
],
                order: [[0, 'asc'], [1, 'asc']],
                dom: '<"flex justify-between items-center mb-4"<"flex"f><"flex-1 text-right"l>>rt<"flex justify-between items-center mt-4"<"flex-1"i><"flex"p>>',
                language: {
                    search: "",
                    searchPlaceholder: "Search release details...",
                    lengthMenu: "_MENU_ per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ items",
                    paginate: {
                        first: '<iconify-icon icon="heroicons-outline:chevron-double-left"></iconify-icon>',
                        last: '<iconify-icon icon="heroicons-outline:chevron-double-right"></iconify-icon>',
                        next: '<iconify-icon icon="heroicons-outline:chevron-right"></iconify-icon>',
                        previous: '<iconify-icon icon="heroicons-outline:chevron-left"></iconify-icon>'
                    },
                    zeroRecords: "No release details found",
                    emptyTable: "No release details available"
                },
                initComplete: function () {
                    if (isDarkMode) {
                        $('.dataTables_filter input').addClass('bg-gray-700 border-gray-600 text-white');
                        $('.dataTables_length select').addClass('bg-gray-700 border-gray-600 text-white');
                    }
                }
            });
        });
function showItemCodes(id, codes) {
    const modal   = document.getElementById('itemCodesModal');
    const content = document.getElementById('itemCodesContent');
    const countEl = document.getElementById('itemCodesCount');

    content.innerHTML = codes
        .map(c => `<div class="font-mono text-sm bg-gray-100 dark:bg-gray-700
                                px-2 py-1 rounded text-center">${c}</div>`).join('');
    countEl.textContent = `Total: ${codes.length} item${codes.length === 1 ? '' : 's'}`;

    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
}

function closeItemCodesModal() {
    document.getElementById('itemCodesModal').classList.add('hidden');
    document.body.style.overflow = 'auto';
}

document.getElementById('itemCodesModal')
        .addEventListener('click', e => { if (e.target.id === 'itemCodesModal') closeItemCodesModal(); });

document.addEventListener('keydown', e => { if (e.key === 'Escape') closeItemCodesModal(); });

    </script>
}

<style>
    .status-completed, .status-released {
        background-color: #10b981;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    .status-partial, .status-pending {
        background-color: #f59e0b;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    .status-due {
        background-color: #ef4444;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    .status-scheduled {
        background-color: #6b7280;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
</style>
