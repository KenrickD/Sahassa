@model WMS.Domain.DTOs.GIV_RawMaterial.Web.RM_ReleaseDetailsViewDto
@{
    ViewData["Title"] = "Release Details";
}
@Html.AntiForgeryToken()

<div class="card p-3 mb-4">
    <div class="flex justify-between items-center">
        <div>
            <h4>Release Details</h4>
            <p><strong>Material:</strong> @Model.MaterialNo - @Model.MaterialDescription</p>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-3">
                <div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Release Date</p>
                    <p class="font-semibold">@Model.ReleaseDate.ToString("yyyy-MM-dd HH:mm")</p>
                </div>
                <div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Released By</p>
                    <p class="font-semibold">@Model.ReleasedByDisplay</p>
                </div>
                <div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Status</p>
                    <span class="@(Model.StatusText switch {
                        "Completed" => "status-completed",
                        "Partially Released" => "status-partial",
                        "Due for Release" => "status-due",
                        _ => "status-scheduled"
                    })">@Model.StatusText</span>
                </div>
                @* <div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Progress</p>
                    <div class="progress mt-1">
                        <div class="progress-bar" style="width: @(Model.ProgressPercentage)%">
                            @(Model.ReleasedPallets + Model.ReleasedItems) / @(Model.TotalPallets + Model.TotalItems)
                        </div>
                    </div>
                    <small class="text-gray-500">@Model.ProgressPercentage%</small>
                </div> *@
            </div>
            @if (!string.IsNullOrEmpty(Model.Remarks))
            {
                <div class="mt-3">
                    <p class="text-sm text-gray-600 dark:text-gray-400">Remarks</p>
                    <p class="font-medium">@Model.Remarks</p>
                </div>
            }
        </div>
        <div class="flex gap-2">
            <a href="@Url.Action("Releases", new { id = Model.RawMaterialId })" class="btn btn-secondary">
                <iconify-icon icon="lucide:arrow-left"></iconify-icon>
                Back to Releases
            </a>
            <a href="@Url.Action("Details", new { id = Model.RawMaterialId })" class="btn btn-info">
                <iconify-icon icon="lucide:package"></iconify-icon>
                Material Details
            </a>
        </div>
    </div>
</div>

<!-- Item Codes Modal -->
<div id="itemCodesModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white dark:bg-gray-800">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">All Item Codes in Pallet</h3>
                <button type="button" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" onclick="closeItemCodesModal()">
                    <iconify-icon icon="lucide:x" class="text-xl"></iconify-icon>
                </button>
            </div>
            <div class="max-h-96 overflow-y-auto">
                <div id="itemCodesContent" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    <!-- Item codes will be populated here -->
                </div>
            </div>
            <div class="flex justify-between items-center mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
                <span id="itemCodesCount" class="text-sm text-gray-600 dark:text-gray-400"></span>
                <button type="button" class="btn btn-secondary" onclick="closeItemCodesModal()">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
    <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
        <div class="flex items-center">
            <iconify-icon icon="lucide:package" class="text-blue-600 text-2xl mr-3"></iconify-icon>
            <div>
                <p class="text-sm text-blue-600 dark:text-blue-400">Entire Pallets</p>
                <p class="text-2xl font-bold text-blue-800 dark:text-blue-200">@Model.EntirePalletCount</p>
                <p class="text-xs text-blue-600 dark:text-blue-400">@Model.ReleasedPallets released</p>
            </div>
        </div>
    </div>
    
    <div class="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
        <div class="flex items-center">
            <iconify-icon icon="lucide:box" class="text-green-600 text-2xl mr-3"></iconify-icon>
            <div>
                <p class="text-sm text-green-600 dark:text-green-400">Individual Items</p>
                <p class="text-2xl font-bold text-green-800 dark:text-green-200">@Model.IndividualItemCount</p>
                <p class="text-xs text-green-600 dark:text-green-400">@Model.ReleasedItems released</p>
            </div>
        </div>
    </div>
    
    <div class="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg">
        <div class="flex items-center">
            <iconify-icon icon="lucide:clock" class="text-orange-600 text-2xl mr-3"></iconify-icon>
            <div>
                <p class="text-sm text-orange-600 dark:text-orange-400">Pending</p>
                <p class="text-2xl font-bold text-orange-800 dark:text-orange-200">@((Model.TotalPallets + Model.TotalItems) - (Model.ReleasedPallets + Model.ReleasedItems))</p>
                <p class="text-xs text-orange-600 dark:text-orange-400">items remaining</p>
            </div>
        </div>
    </div>
    
    @if (Model.ActualReleaseDate.HasValue)
    {
        <div class="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
            <div class="flex items-center">
                <iconify-icon icon="lucide:check-circle" class="text-purple-600 text-2xl mr-3"></iconify-icon>
                <div>
                    <p class="text-sm text-purple-600 dark:text-purple-400">Completed</p>
                    <p class="text-sm font-bold text-purple-800 dark:text-purple-200">@Model.ActualReleaseDate.Value.ToString("MMM dd, yyyy")</p>
                    <p class="text-xs text-purple-600 dark:text-purple-400">by @Model.ActualReleasedBy</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
            <div class="flex items-center">
                <iconify-icon icon="lucide:calendar" class="text-gray-600 text-2xl mr-3"></iconify-icon>
                <div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Due Date</p>
                    <p class="text-sm font-bold text-gray-800 dark:text-gray-200">@Model.ReleaseDate.ToString("MMM dd, yyyy")</p>
                    <p class="text-xs text-gray-600 dark:text-gray-400">
                        @if (Model.ReleaseDate.Date < DateTime.UtcNow.Date)
                        {
                            <span class="text-red-600">Overdue</span>
                        }
                        else if (Model.ReleaseDate.Date == DateTime.UtcNow.Date)
                        {
                            <span class="text-orange-600">Due today</span>
                        }
                        else
                        {
                            <span>@((Model.ReleaseDate.Date - DateTime.UtcNow.Date).Days) days remaining</span>
                        }
                    </p>
                </div>
            </div>
        </div>
    }
</div>

<div class="card">
    <div class="card-header">
        <h5 class="card-title">Release Items</h5>
    </div>
    <div class="card-body">
        <table id="release-details-table" class="table table-striped" data-release-id="@Model.Id">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Pallet Code</th>
                    <th>Item Code(s)</th>
                    <th>Batch No</th>
                    <th>Location</th>
                    <th>Received Date</th>
                    <th>Pack Size</th>
                    <th>Status</th>
                    <th>Release Info</th>
                </tr>
            </thead>
            <tbody>
                <!-- Populated via DataTables -->
            </tbody>
        </table>
    </div>
</div>

<style>
    /* Status badges */
    .status-completed {
        background-color: #10b981;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    
    .status-partial {
        background-color: #f59e0b;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    
    .status-due {
        background-color: #ef4444;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    
    .status-scheduled {
        background-color: #6b7280;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .status-released {
        background-color: #10b981;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    
    .status-pending {
        background-color: #f59e0b;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    /* Progress bar */
    .progress {
        height: 1rem;
        background-color: #e5e7eb;
        border-radius: 0.375rem;
        overflow: hidden;
    }
    
    .progress-bar {
        height: 100%;
        background-color: #3b82f6;
        transition: width 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.75rem;
        font-weight: 600;
    }
    
    /* Dark mode styles */
    .dark .progress {
        background-color: #374151;
    }
    
    .dark .table {
        color: #e5e7eb;
    }
    
    .dark .card {
        background-color: #1f2937;
        border-color: #374151;
    }
    
    .dark .card-header {
        background-color: #111827;
        border-color: #374151;
    }
    
    /* DataTables dark mode */
    .dark .dataTables_wrapper .dataTables_filter input,
    .dark .dataTables_wrapper .dataTables_length select {
        background-color: #374151;
        border-color: #4b5563;
        color: white;
    }
    
    .dark .dataTables_wrapper .dataTables_info,
    .dark .dataTables_wrapper .dataTables_paginate {
        color: #e5e7eb;
    }
    
    /* Item codes container styling */
    .item-codes-container {
        max-width: 200px;
        line-height: 1.4;
    }
    
    .item-codes-container span {
        display: inline-block;
        margin-right: 0.25rem;
        margin-bottom: 0.25rem;
    }
    
    .item-codes-summary {
        min-width: 150px;
    }
    
    .btn-link {
        background: none;
        border: none;
        padding: 0;
        cursor: pointer;
        text-decoration: underline;
    }
    
    .btn-link:hover {
        text-decoration: none;
    }
    
    /* Modal backdrop blur effect */
    .modal-backdrop {
        backdrop-filter: blur(2px);
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            initReleaseDetailsTable();
        });

        function initReleaseDetailsTable() {
            const releaseId = document.getElementById("release-details-table").dataset.releaseId;
            const token = $('input[name="__RequestVerificationToken"]').val();
            
            // Check if dark mode is active
            const isDarkMode = document.documentElement.classList.contains('dark') ||
                document.body.classList.contains('dark');

            $('#release-details-table').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: `/RawMaterial/GetPaginatedReleaseDetails?releaseId=${releaseId}`,
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'X-CSRF-TOKEN': token,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    data: function (d) {
                        return JSON.stringify(d);
                    },
                    error: function (xhr, error, thrown) {
                        console.error('Failed to load release details data:', error);
                    }
                },
                columns: [
                    {
                        data: 'typeText',
                        render: function (data, type, row) {
                            const iconClass = row.isEntirePallet ? 'lucide:package' : 'lucide:box';
                            const textClass = row.isEntirePallet ? 'text-blue-600' : 'text-green-600';
                            return `<div class="flex items-center">
                                        <iconify-icon icon="${iconClass}" class="${textClass} mr-2"></iconify-icon>
                                        <span class="${textClass} font-medium">${data}</span>
                                    </div>`;
                        }
                    },
                    { 
                        data: 'palletCode',
                        render: function (data, type, row) {
                            return `<span class="font-mono text-sm bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">${data}</span>`;
                        }
                    },
                    {
                        data: 'itemCodesDisplay',
                        render: function (data, type, row) {
                            if (data === '-') return '<span class="text-muted">-</span>';
                            
                            if (row.isEntirePallet && row.allItemCodes && row.allItemCodes.length > 0) {
                                const itemCount = row.allItemCodes.length;
                                
                                if (itemCount === 1) {
                                    // Single item - show it normally
                                    return `<span class="font-mono text-sm bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">${row.allItemCodes[0]}</span>`;
                                } else if (itemCount <= 3) {
                                    // Few items - show all as badges
                                    return `<div class="item-codes-container">
                                                ${row.allItemCodes.map(code => `<span class="font-mono text-xs bg-gray-100 dark:bg-gray-700 px-1 py-0.5 rounded mr-1 mb-1 inline-block">${code}</span>`).join('')}
                                            </div>`;
                                } else {
                                    // Many items - show count with expandable view
                                    return `<div class="item-codes-summary">
                                                <div class="flex items-center gap-2">
                                                    <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-sm font-medium">
                                                        ${itemCount} Items
                                                    </span>
                                                    <button class="btn-link text-xs text-blue-600 hover:text-blue-800" 
                                                            onclick="showItemCodes('${row.id}', ${JSON.stringify(row.allItemCodes).replace(/"/g, '&quot;')})">
                                                        <iconify-icon icon="lucide:eye" class="mr-1"></iconify-icon>View All
                                                    </button>
                                                </div>
                                                <div class="text-xs text-gray-500 mt-1">
                                                    ${row.allItemCodes.slice(0, 2).join(', ')}...
                                                </div>
                                            </div>`;
                                }
                            } else {
                                // Individual item - show the single item code
                                return `<span class="font-mono text-sm bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">${data}</span>`;
                            }
                        }
                    },
                    { data: 'batchNo' },
                    {
                        data: 'locationCode',
                        render: function (data, type, row) {
                            if (!data) return '<span class="text-muted">-</span>';
                            return `<span class="font-mono text-sm">${data}</span>`;
                        }
                    },
                    {
                        data: 'receivedDate',
                        render: function (data, type, row) {
                            const date = new Date(data);
                            return date.toLocaleDateString();
                        }
                    },
                    { data: 'packSize' },
                    {
                        data: 'statusText',
                        render: function (data, type, row) {
                            return `<span class="${row.statusClass}">${data}</span>`;
                        }
                    },
                    {
                        data: 'actualReleaseInfo',
                        render: function (data, type, row) {
                            if (row.isActuallyReleased) {
                                const date = new Date(row.actualReleaseDate);
                                return `<div class="text-sm">
                                            <div class="font-medium text-green-600">${row.actualReleasedBy}</div>
                                            <div class="text-gray-500">${date.toLocaleDateString()} ${date.toLocaleTimeString()}</div>
                                        </div>`;
                            } else {
                                return '<span class="text-muted">Not released yet</span>';
                            }
                        }
                    }
                ],
                order: [[0, 'asc'], [1, 'asc']],
                dom: '<"flex justify-between items-center mb-4"<"flex"f><"flex-1 text-right"l>>rt<"flex justify-between items-center mt-4"<"flex-1"i><"flex"p>>',
                language: {
                    search: "",
                    searchPlaceholder: "Search release details...",
                    lengthMenu: "_MENU_ per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ items",
                    paginate: {
                        first: '<iconify-icon icon="heroicons-outline:chevron-double-left"></iconify-icon>',
                        last: '<iconify-icon icon="heroicons-outline:chevron-double-right"></iconify-icon>',
                        next: '<iconify-icon icon="heroicons-outline:chevron-right"></iconify-icon>',
                        previous: '<iconify-icon icon="heroicons-outline:chevron-left"></iconify-icon>'
                    },
                    zeroRecords: "No release details found",
                    emptyTable: "No release details available"
                },
                initComplete: function () {
                    if (isDarkMode) {
                        $('.dataTables_filter input').addClass('bg-gray-700 border-gray-600 text-white');
                        $('.dataTables_length select').addClass('bg-gray-700 border-gray-600 text-white');
                        $(this).closest('.dataTables_wrapper').addClass('dark-mode-table');
                    }
                }
            });
        }
        
        function showItemCodes(releaseDetailId, itemCodes) {
            const modal = document.getElementById('itemCodesModal');
            const content = document.getElementById('itemCodesContent');
            const count = document.getElementById('itemCodesCount');
            
            // Clear previous content
            content.innerHTML = '';
            
            // Populate with item codes
            itemCodes.forEach(code => {
                const codeElement = document.createElement('div');
                codeElement.className = 'font-mono text-sm bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded text-center';
                codeElement.textContent = code;
                content.appendChild(codeElement);
            });
            
            // Update count
            count.textContent = `Total: ${itemCodes.length} item${itemCodes.length === 1 ? '' : 's'}`;
            
            // Show modal
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }
        
        function closeItemCodesModal() {
            const modal = document.getElementById('itemCodesModal');
            modal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }
        
        // Close modal when clicking outside
        document.getElementById('itemCodesModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeItemCodesModal();
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeItemCodesModal();
            }
        });
    </script>
}