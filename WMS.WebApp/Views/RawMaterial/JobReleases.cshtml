<!-- Updated JobReleases.cshtml with width fixes -->
@{
    ViewData["Title"] = "Job Releases";
}
@Html.AntiForgeryToken()

<div class="card p-3 mb-4">
    <div class="flex justify-between items-center">
        <div>
            <h4>Raw Material Job Releases</h4>
            <p>Multi-material release jobs grouped by Job ID</p>
        </div>
        <div class="flex gap-2">
            <a href="@Url.Action("CreateJobRelease")" class="btn btn-success">
                <iconify-icon icon="lucide:plus-circle"></iconify-icon>
                Create Job Release
            </a>
            <a href="@Url.Action("Datatable")" class="btn btn-secondary">
                <iconify-icon icon="lucide:arrow-left"></iconify-icon>
                Back to Raw Materials
            </a>
        </div>
    </div>
</div>

<!-- Add container wrapper with proper overflow handling -->
<div class="table-container">
    <div class="card">
        <div class="card-header">
            <div class="flex justify-between items-center">
                <h5 class="card-title">Job Release History</h5>
                <div class="text-sm text-gray-600 dark:text-gray-400">
                    <iconify-icon icon="lucide:info" class="mr-1"></iconify-icon>
                    <span class="hidden md:inline">Search by job ID, material numbers, release dates, or usernames</span>
                    <span class="md:hidden">Advanced search available</span>
                </div>
            </div>
        </div>
        <div class="card-body">
            <!-- Add responsive wrapper -->
            <div class="table-responsive">
                <table id="job-releases-table" class="table table-striped">
                    <thead>
                        <tr>
                            <th>Job ID</th>
                            <th>Planned Release Date</th>
                            <th>Created By</th>
                            <th>Material Count</th>
                            <th>Total Pallets</th>
                            <th>Total Items</th>
                            <th>Job Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Populated via DataTables -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Status color legend -->
<div class="mt-4">
    <div class="flex flex-wrap gap-4 text-sm">
        <div class="flex items-center gap-2">
            <span class="w-3 h-3 bg-blue-500 rounded-full"></span>
            <span>Scheduled</span>
        </div>
        <div class="flex items-center gap-2">
            <span class="w-3 h-3 bg-yellow-500 rounded-full"></span>
            <span>In Progress</span>
        </div>
        <div class="flex items-center gap-2">
            <span class="w-3 h-3 bg-green-500 rounded-full"></span>
            <span>Completed</span>
        </div>
        <div class="flex items-center gap-2">
            <span class="w-3 h-3 bg-red-500 rounded-full"></span>
            <span>Overdue</span>
        </div>
    </div>
</div>

<style>
    /* Fix container width issues */
    .table-container {
        width: 100%;
        max-width: 100%;
        overflow-x: auto;
    }

    /* Table responsive wrapper */
    .table-responsive {
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }

    /* Constrain table width */
    #job-releases-table {
        width: 100% !important;
        max-width: 100%;
        table-layout: auto;
    }

    /* Prevent DataTables from expanding beyond container */
    .dataTables_wrapper {
        width: 100% !important;
        max-width: 100% !important;
        overflow-x: hidden;
    }

    .dataTables_scroll {
        width: 100% !important;
        max-width: 100% !important;
    }

    .dataTables_scrollBody {
        width: 100% !important;
        max-width: 100% !important;
    }

    /* Fix column widths */
    #job-releases-table th,
    #job-releases-table td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        /* Specific column width constraints */
        #job-releases-table th:nth-child(1) {
            width: 120px;
            max-width: 120px;
        }
        /* Job ID */
        #job-releases-table th:nth-child(2) {
            width: 140px;
            max-width: 140px;
        }
        /* Planned Release Date */
        #job-releases-table th:nth-child(3) {
            width: 150px;
            max-width: 150px;
        }
        /* Created By */
        #job-releases-table th:nth-child(4) {
            width: 100px;
            max-width: 100px;
        }
        /* Material Count */
        #job-releases-table th:nth-child(5) {
            width: 100px;
            max-width: 100px;
        }
        /* Total Pallets */
        #job-releases-table th:nth-child(6) {
            width: 100px;
            max-width: 100px;
        }
        /* Total Items */
        #job-releases-table th:nth-child(7) {
            width: 120px;
            max-width: 120px;
        }
        /* Job Status */
        #job-releases-table th:nth-child(8) {
            width: 120px;
            max-width: 120px;
        }
        /* Actions */

        /* Apply same constraints to td elements */
        #job-releases-table td:nth-child(1) {
            width: 120px;
            max-width: 120px;
        }

        #job-releases-table td:nth-child(2) {
            width: 140px;
            max-width: 140px;
        }

        #job-releases-table td:nth-child(3) {
            width: 150px;
            max-width: 150px;
        }

        #job-releases-table td:nth-child(4) {
            width: 100px;
            max-width: 100px;
        }

        #job-releases-table td:nth-child(5) {
            width: 100px;
            max-width: 100px;
        }

        #job-releases-table td:nth-child(6) {
            width: 100px;
            max-width: 100px;
        }

        #job-releases-table td:nth-child(7) {
            width: 120px;
            max-width: 120px;
        }

        #job-releases-table td:nth-child(8) {
            width: 120px;
            max-width: 120px;
        }

    /* Progress bar styles */
    .progress {
        height: 20px;
        background-color: #f3f4f6;
        border-radius: 10px;
        overflow: hidden;
        position: relative;
    }

    .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, #3b82f6 0%, #10b981 100%);
        transition: width 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.75rem;
        font-weight: 600;
    }

    /* Status badge styles */
    .status-scheduled {
        background-color: #dbeafe;
        color: #1e40af;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-in-progress {
        background-color: #fef3c7;
        color: #92400e;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-completed {
        background-color: #d1fae5;
        color: #065f46;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-overdue {
        background-color: #fee2e2;
        color: #991b1b;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-due {
        background-color: #fdf4ff;
        color: #a21caf;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    /* Action buttons styling */
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
        min-width: 32px;
        height: 32px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

    .btn-info {
        background-color: #17a2b8;
        border-color: #17a2b8;
        color: white;
    }

        .btn-info:hover {
            background-color: #138496;
            border-color: #117a8b;
        }

    .flex {
        display: flex;
    }

    .gap-1 {
        gap: 0.25rem;
    }

    /* Dark mode adjustments */
    .dark .status-scheduled {
        background-color: rgba(59, 130, 246, 0.2);
        color: #93c5fd;
    }

    .dark .status-in-progress {
        background-color: rgba(245, 158, 11, 0.2);
        color: #fbbf24;
    }

    .dark .status-completed {
        background-color: rgba(16, 185, 129, 0.2);
        color: #6ee7b7;
    }

    .dark .status-overdue {
        background-color: rgba(239, 68, 68, 0.2);
        color: #fca5a5;
    }

    .dark .status-due {
        background-color: rgba(162, 28, 175, 0.2);
        color: #e879f9;
    }

    .dark .progress {
        background-color: #374151;
    }

    .dark .table {
        color: #e5e7eb;
    }

    .dark .card {
        background-color: #1f2937;
        border-color: #374151;
    }

    .dark .card-header {
        background-color: #111827;
        border-color: #374151;
    }

    /* DataTables dark mode */
    .dark .dataTables_wrapper .dataTables_filter input,
    .dark .dataTables_wrapper .dataTables_length select {
        background-color: #374151;
        border-color: #4b5563;
        color: white;
    }

    .dark .dataTables_wrapper .dataTables_info,
    .dark .dataTables_wrapper .dataTables_paginate {
        color: #e5e7eb;
    }

    /* Mobile responsiveness */
    @@media (max-width: 768px) {
        .table-responsive

    {
        font-size: 0.875rem;
    }

    .btn-sm {
        padding: 0.125rem 0.25rem;
        font-size: 0.75rem;
        min-width: 28px;
        height: 28px;
    }

    #job-releases-table th,
    #job-releases-table td {
        padding: 0.5rem 0.25rem;
    }

    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            initJobReleasesTable();
        });

        function initJobReleasesTable() {
            const token = $('input[name="__RequestVerificationToken"]').val();

            // Check if dark mode is active
            const isDarkMode = document.documentElement.classList.contains('dark') ||
                document.body.classList.contains('dark');

            $('#job-releases-table').DataTable({
                processing: true,
                serverSide: true,
                responsive: false, // Disable DataTables responsive as we handle it with CSS
                scrollX: true, // Enable horizontal scrolling
                scrollCollapse: true,
                autoWidth: false, // Prevent auto width calculation
                ajax: {
                    url: '/RawMaterial/GetPaginatedJobReleases',
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'X-CSRF-TOKEN': token
                    },
                    data: function(d) {
                        return JSON.stringify(d);
                    }
                },
                columnDefs: [
                    { width: "120px", targets: 0 }, // Job ID
                    { width: "140px", targets: 1 }, // Planned Release Date
                    { width: "150px", targets: 2 }, // Created By
                    { width: "100px", targets: 3, className: "text-center" }, // Material Count
                    { width: "100px", targets: 4, className: "text-center" }, // Total Pallets
                    { width: "100px", targets: 5, className: "text-center" }, // Total Items
                    { width: "120px", targets: 6 }, // Job Status
                    { width: "120px", targets: 7, orderable: false, searchable: false } // Actions
                ],
                columns: [
                    {
                        data: 'jobId',
                        render: function(data, type, row) {
                            // Show first 8 characters of JobId
                            const shortId = data.substring(0, 8).toUpperCase();
                            return `<span class="font-mono text-sm" title="${data}">${shortId}...</span>`;
                        }
                    },
                    {
                        data: 'plannedReleaseDate',
                        render: function(data, type, row) {
                            const date = new Date(data);
                            return date.toLocaleDateString();
                        }
                    },
                    {
                        data: 'createdByFullName',
                        render: function(data, type, row) {
                            const displayName = data || row.createdBy || '-';
                            return `<span title="${displayName}">${displayName}</span>`;
                        }
                    },
                    { data: 'materialCount' },
                    { data: 'totalPallets' },
                    { data: 'totalItems' },
                    {
                        data: 'jobStatus',
                        render: function(data, type, row) {
                            const statusClass = getJobStatusClass(data);
                            return `<span class="${statusClass}">${data}</span>`;
                        }
                    },
                    {
                        data: null,
                        render: function(data, type, row) {
                            const shortId = row.jobId.substring(0, 8).toUpperCase();
                            let buttons = `
                                <div class="flex gap-1">
                                    <button onclick="viewJobReleaseDetails('${row.jobId}')"
                                            class="btn btn-sm btn-info" title="View Details">
                                        <iconify-icon icon="lucide:eye"></iconify-icon>
                                    </button>`;

                            // Only show delete button if user has delete access
                            if (row.hasDeleteAccess) {
                                buttons += `
                                    <button onclick="deleteJobReleases('${row.jobId}', '${shortId}')"
                                            class="btn btn-sm btn-danger" title="Delete Job">
                                        <iconify-icon icon="lucide:trash-2"></iconify-icon>
                                    </button>`;
                            }

                            buttons += `</div>`;
                            return buttons;
                        }
                    }
                ],
                order: [[1, 'desc']], // Order by planned release date descending
                dom: '<"flex justify-between items-center mb-4"<"flex"f><"flex-1 text-right"l>>rt<"flex justify-between items-center mt-4"<"flex-1"i><"flex"p>>',
                language: {
                    search: "",
                    searchPlaceholder: "Search job releases...",
                    lengthMenu: "_MENU_ per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ job releases",
                    paginate: {
                        first: '<iconify-icon icon="heroicons-outline:chevron-double-left"></iconify-icon>',
                        last: '<iconify-icon icon="heroicons-outline:chevron-double-right"></iconify-icon>',
                        next: '<iconify-icon icon="heroicons-outline:chevron-right"></iconify-icon>',
                        previous: '<iconify-icon icon="heroicons-outline:chevron-left"></iconify-icon>'
                    },
                    zeroRecords: "No job releases found",
                    emptyTable: "No job release data available"
                },
                initComplete: function() {
                    if (isDarkMode) {
                        $('.dataTables_filter input').addClass('bg-gray-700 border-gray-600 text-white');
                        $('.dataTables_length select').addClass('bg-gray-700 border-gray-600 text-white');
                        $(this).closest('.dataTables_wrapper').addClass('dark-mode-table');
                    }

                    // Fix any width issues after initialization
                    $(window).trigger('resize');
                }
            });
        }

        function getJobStatusClass(status) {
            switch (status.toLowerCase()) {
                case 'scheduled':
                    return 'status-scheduled';
                case 'in progress':
                    return 'status-in-progress';
                case 'completed':
                    return 'status-completed';
                case 'overdue':
                    return 'status-overdue';
                case 'due for release':
                    return 'status-due';
                default:
                    return 'status-scheduled';
            }
        }

        function viewJobReleaseDetails(jobId) {
            window.location.href = `/RawMaterial/JobReleaseDetails/${jobId}`;
        }

        // Show success message if redirected from job creation
        $(document).ready(function() {
            const successMessage = sessionStorage.getItem("jobReleaseSuccessMessage");
            if (successMessage) {
                toastr.success(successMessage);
                sessionStorage.removeItem("jobReleaseSuccessMessage");
            }
        });

        function deleteJobReleases(jobId, jobIdShort) {
            Swal.fire({
                title: 'Delete Job Releases?',
                html: `Are you sure you want to delete all releases for Job <strong>${jobIdShort}</strong>?<br><br>
                       <span class="text-warning">This will delete all releases and release details in this job.</span>`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, Delete Job',
                cancelButtonText: 'Cancel',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Deleting...',
                        text: 'Please wait while we delete the job releases.',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        willOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Make the delete request
                    $.post('/RawMaterial/DeleteJobReleases', {
                        jobId: jobId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                    .done(function(response) {
                        if (response.success) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: response.message,
                                icon: 'success',
                                timer: 3000,
                                showConfirmButton: false
                            });

                            // Refresh the DataTable
                            if ($.fn.DataTable.isDataTable('#job-releases-table')) {
                                $('#job-releases-table').DataTable().ajax.reload();
                            }
                        } else {
                            Swal.fire({
                                title: 'Delete Failed',
                                text: response.message,
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .fail(function(xhr, status, error) {
                        Swal.fire({
                            title: 'Error',
                            text: 'An error occurred while deleting the job releases. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                        console.error('Delete job releases error:', error);
                    });
                }
            });
        }
    </script>
}