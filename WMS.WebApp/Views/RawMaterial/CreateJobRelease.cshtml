@{
    ViewData["Title"] = "Create Job Release";
}
@Html.AntiForgeryToken()

<div class="card p-4">
    <div class="flex justify-between items-center mb-4">
        <h3>Create Job Release</h3>
        <a href="@Url.Action("JobReleases")" class="btn btn-secondary">
            <iconify-icon icon="lucide:arrow-left"></iconify-icon>
            Back to Job Releases
        </a>
    </div>

    <!-- Step Indicator -->
    <div class="mb-6">
        <div class="flex items-center justify-center">
            <div class="step-indicator">
                <div class="step step-active" data-step="1">
                    <div class="step-circle">
                        <span class="step-number">1</span>
                        <iconify-icon icon="lucide:check" class="step-check hidden"></iconify-icon>
                    </div>
                    <span class="step-label">Select Materials</span>
                </div>
                <div class="step-connector"></div>
                <div class="step" data-step="2">
                    <div class="step-circle">
                        <span class="step-number">2</span>
                        <iconify-icon icon="lucide:check" class="step-check hidden"></iconify-icon>
                    </div>
                    <span class="step-label">Configure Release</span>
                </div>
                <div class="step-connector"></div>
                <div class="step" data-step="3">
                    <div class="step-circle">
                        <span class="step-number">3</span>
                        <iconify-icon icon="lucide:check" class="step-check hidden"></iconify-icon>
                    </div>
                    <span class="step-label">Review & Submit</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 1: Material Selection -->
    <div id="step-1" class="step-content">
        <div class="step-header mb-4">
            <h4>Step 1: Select Raw Materials</h4>
            <p class="text-muted">Choose the raw materials you want to include in this job release.</p>
        </div>

        <div class="mb-4">
            <div class="flex justify-between items-center">
                <div class="search-section">
                    <input type="text" id="material-search" class="form-control" placeholder="Search materials..." style="width: 300px;">
                </div>
                <div class="selection-summary">
                    <span class="badge bg-primary" id="selected-count">0 materials selected</span>
                </div>
            </div>
        </div>

        <div class="material-selection-container">
            <table id="materials-selection-table" class="table table-striped">
                <thead>
                    <tr>
                        <th style="width: 50px;">
                            <input type="checkbox" id="select-all-materials" class="form-check-input">
                        </th>
                        <th>Material No</th>
                        <th>Description</th>
                        <th>Balance Qty</th>
                        <th>Balance Pallets</th>
                    </tr>
                </thead>
                <tbody id="materials-table-body">
                    <!-- Populated via JavaScript -->
                </tbody>
            </table>
        </div>

        <div class="step-footer mt-4">
            <button id="next-to-step-2" class="btn btn-primary" disabled>
                Next: Configure Release
                <iconify-icon icon="lucide:arrow-right"></iconify-icon>
            </button>
        </div>
    </div>

    <!-- Step 2: Release Configuration -->
    <div id="step-2" class="step-content" style="display: none;">
        <div class="step-header mb-4">
            <h4>Step 2: Configure Release Details</h4>
            <p class="text-muted">Configure release settings for each selected material.</p>
        </div>

        <!-- Global Settings -->
        <div class="card p-3 mb-4 bg-light">
            <h5>Global Settings</h5>
            <div class="row">
                <div class="col-md-4">
                    <label class="form-label">Default Release Date</label>
                    <input type="date" id="global-release-date" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")">
                </div>
                <div class="col-md-4">
                    <label class="form-label">Job Remarks</label>
                    <input type="text" id="job-remarks" class="form-control" placeholder="Optional job-level remarks">
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="button" id="apply-global-settings" class="btn btn-outline-primary">
                        Apply to All Materials
                    </button>
                </div>
            </div>
        </div>

        <!-- Selected Materials Configuration -->
        <div id="selected-materials-container">
            <!-- Dynamic content populated by JavaScript -->
        </div>

        <div class="step-footer mt-4">
            <button id="prev-to-step-1" class="btn btn-secondary">
                <iconify-icon icon="lucide:arrow-left"></iconify-icon>
                Previous
            </button>
            <button id="next-to-step-3" class="btn btn-primary" disabled>
                Next: Review
                <iconify-icon icon="lucide:arrow-right"></iconify-icon>
            </button>
        </div>
    </div>

    <!-- Step 3: Review & Submit -->
    <div id="step-3" class="step-content" style="display: none;">
        <div class="step-header mb-4">
            <h4>Step 3: Review & Submit</h4>
            <p class="text-muted">Review your job release configuration before submitting.</p>
        </div>

        <!-- Job Summary -->
        <div class="card p-3 mb-4">
            <h5>Job Summary</h5>
            <div class="row">
                <div class="col-md-3">
                    <strong>Materials:</strong>
                    <div id="summary-material-count" class="text-primary fs-4">0</div>
                </div>
                <div class="col-md-3">
                    <strong>Total Pallets:</strong>
                    <div id="summary-pallet-count" class="text-success fs-4">0</div>
                </div>
                <div class="col-md-3">
                    <strong>Total Items:</strong>
                    <div id="summary-item-count" class="text-info fs-4">0</div>
                </div>
                <div class="col-md-3">
                    <strong>Release Date:</strong>
                    <div id="summary-release-date" class="text-warning fs-6">-</div>
                </div>
            </div>
        </div>

        <!-- Detailed Review -->
        <div class="card">
            <div class="card-header">
                <h5>Release Details</h5>
            </div>
            <div class="card-body">
                <div id="release-review-details">
                    <!-- Populated by JavaScript -->
                </div>
            </div>
        </div>

        <div class="step-footer mt-4">
            <button id="prev-to-step-2" class="btn btn-secondary">
                <iconify-icon icon="lucide:arrow-left"></iconify-icon>
                Previous
            </button>
            <button id="submit-job-release" class="btn btn-success">
                <iconify-icon icon="lucide:check"></iconify-icon>
                Create Job Release
            </button>
        </div>
    </div>
</div>

<style>
    /* Step Indicator Styles */
    .step-indicator {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
    }

    .step-circle {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background-color: #e5e7eb;
        border: 2px solid #d1d5db;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 8px;
        transition: all 0.3s ease;
    }

    .step-active .step-circle {
        background-color: #3b82f6;
        border-color: #2563eb;
        color: white;
    }

    .step-completed .step-circle {
        background-color: #10b981;
        border-color: #059669;
        color: white;
    }

    .step-number {
        font-weight: 600;
        font-size: 0.875rem;
    }

    .step-check {
        font-size: 1.25rem;
    }

    .step-completed .step-number {
        display: none;
    }

    .step-completed .step-check {
        display: block !important;
    }

    .step-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: #6b7280;
        text-align: center;
    }

    .step-active .step-label {
        color: #1f2937;
        font-weight: 600;
    }

    .step-connector {
        width: 100px;
        height: 2px;
        background-color: #e5e7eb;
        margin: 0 20px;
        margin-top: 25px;
    }

    .step-active ~ .step-connector,
    .step-completed ~ .step-connector {
        background-color: #10b981;
    }

    /* Material Selection Table */
    .material-selection-container {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
    }

    .material-row {
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .material-row:hover {
            background-color: #f9fafb;
        }

        .material-row.selected {
            background-color: #eff6ff;
            border-left: 4px solid #3b82f6;
        }

    /* Step Content */
    .step-content {
        min-height: 400px;
    }

    .step-header h4 {
        color: #1f2937;
        margin-bottom: 8px;
    }

    .step-header p {
        color: #6b7280;
    }

    .step-footer {
        display: flex;
        justify-content: space-between;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
    }

    /* Material Configuration Cards */
    .material-config-card {
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        margin-bottom: 20px;
        overflow: hidden;
    }

    .material-config-header {
        background-color: #f8fafc;
        padding: 16px;
        border-bottom: 1px solid #e5e7eb;
    }

    .material-config-content {
        padding: 16px;
        transition: opacity 0.3s ease;
    }

    /* Pallet and item styles */
    .pallets-container {
        display: flex;
        flex-wrap: wrap;
        align-content: flex-start;
        max-height: 400px;
        overflow-y: auto;
        padding: 5px;
        gap: 10px;
    }

    .pallet-items {
        max-height: 150px;
        overflow-y: auto;
        padding-right: 5px;
    }

        /* Scrollbar styles */
        .pallet-items::-webkit-scrollbar,
        .pallets-container::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        .pallet-items::-webkit-scrollbar-track,
        .pallets-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .pallet-items::-webkit-scrollbar-thumb,
        .pallets-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

            .pallet-items::-webkit-scrollbar-thumb:hover,
            .pallets-container::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

        .pallet-items ul li {
            margin-bottom: 6px !important;
            padding: 2px 0;
        }

    /* Table styles for material configurations */
    .material-config-card .table {
        margin-bottom: 0;
    }

        .material-config-card .table td {
            vertical-align: middle;
        }

    .material-config-card .card {
        border: 1px solid #dee2e6;
        margin: 2px;
    }

    /* Toggle button styles */
    .toggle-all-items {
        color: #0d6efd;
        text-decoration: none;
        font-size: 0.875rem;
    }

        .toggle-all-items:hover {
            text-decoration: underline;
        }

    /* Review section styles */
    .material-review-card .card {
        border-left: 4px solid #3b82f6;
    }

    .receive-review {
        padding: 8px;
        background-color: #f8f9fa;
        border-radius: 4px;
        border-left: 3px solid #28a745;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .step-indicator {
            flex-direction: column;
        }

        .step-connector {
            width: 2px;
            height: 50px;
            margin: 10px 0;
        }

        .step {
            margin-bottom: 10px;
        }
    }

    /* Dark mode support */
    .dark .step-circle {
        background-color: #374151;
        border-color: #4b5563;
    }

    .dark .step-active .step-circle {
        background-color: #3b82f6;
        border-color: #2563eb;
    }

    .dark .step-completed .step-circle {
        background-color: #10b981;
        border-color: #059669;
    }

    .dark .step-header h4 {
        color: #f9fafb;
    }

    .dark .step-header p {
        color: #d1d5db;
    }

    .dark .step-footer {
        border-top-color: #374151;
    }

    .dark .material-selection-container {
        border-color: #374151;
    }

    .dark .material-row:hover {
        background-color: #1f2937;
    }

    .dark .material-row.selected {
        background-color: #1e3a8a;
        border-left-color: #3b82f6;
    }

    .dark .material-config-card {
        border-color: #374151;
        background-color: #1f2937;
    }

    .dark .material-config-header {
        background-color: #111827;
        border-bottom-color: #374151;
    }

        .dark .material-config-header h5 {
            color: #f9fafb;
        }

        .dark .material-config-header small {
            color: #9ca3af;
        }

    .dark .material-config-content {
        background-color: #1f2937;
    }

    .dark .material-config-card .table {
        color: #e5e7eb;
    }

    .dark .material-config-card .card {
        background-color: #374151;
        border-color: #4b5563;
    }

    .dark .toggle-all-items {
        color: #60a5fa;
    }

    .dark .receive-review {
        background-color: #374151;
        color: #e5e7eb;
    }
</style>

@section Scripts {
    <script>
        // Global variables
        let selectedMaterials = new Set();
        let availableMaterials = [];
        let jobReleaseConfig = {};

        $(document).ready(function() {
            initializeCreateJobRelease();
        });

        function initializeCreateJobRelease() {
            // Load available materials
            loadAvailableMaterials();

            // Set default release date to tomorrow
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            document.getElementById('global-release-date').value = tomorrow.toISOString().split('T')[0];

            // Set up event listeners
            setupEventListeners();
        }

        function setupEventListeners() {
            // Step navigation
            document.getElementById('next-to-step-2').addEventListener('click', () => goToStep(2));
            document.getElementById('prev-to-step-1').addEventListener('click', () => goToStep(1));
            document.getElementById('next-to-step-3').addEventListener('click', () => goToStep(3));
            document.getElementById('prev-to-step-2').addEventListener('click', () => goToStep(2));

            // Material selection
            document.getElementById('select-all-materials').addEventListener('change', toggleAllMaterials);
            document.getElementById('material-search').addEventListener('input', filterMaterials);

            // Global settings
            document.getElementById('apply-global-settings').addEventListener('click', applyGlobalSettings);

            // Submit
            document.getElementById('submit-job-release').addEventListener('click', submitJobRelease);

            // Set up Step 2 event listeners (using event delegation)
            setupStep2EventListeners();
        }

        function loadAvailableMaterials() {
            // Show loading state
            const tbody = document.getElementById('materials-table-body');
            tbody.innerHTML = '<tr><td colspan="5" class="text-center">Loading materials...</td></tr>';

            fetch('/RawMaterial/GetAvailableMaterialsForJobRelease')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('HTTP error! status: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Loaded materials:', data);
                    availableMaterials = data;
                    renderMaterialsTable();
                })
                .catch(error => {
                    console.error('Error loading materials:', error);
                    tbody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Failed to load materials. Please refresh the page.</td></tr>';
                    toastr.error('Failed to load available materials');
                });
        }

        function renderMaterialsTable() {
            const tbody = document.getElementById('materials-table-body');
            tbody.innerHTML = '';

            if (!availableMaterials || availableMaterials.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">No materials with available inventory found.</td></tr>';
                return;
            }

            availableMaterials.forEach(material => {
                const row = document.createElement('tr');
                row.className = 'material-row';
                row.dataset.materialId = material.id;

                const description = material.description || '-';

                row.innerHTML = `
                    <td>
                        <input type="checkbox" class="form-check-input material-checkbox"
                               data-material-id="${material.id}">
                    </td>
                    <td><strong>${material.materialNo}</strong></td>
                    <td>${description}</td>
                    <td class="text-center">${material.balanceQty}</td>
                    <td class="text-center">${material.balancePallets}</td>
                `;

                // Add click handler for row
                row.addEventListener('click', function(e) {
                    if (e.target.type !== 'checkbox') {
                        const checkbox = row.querySelector('.material-checkbox');
                        checkbox.checked = !checkbox.checked;
                        checkbox.dispatchEvent(new Event('change'));
                    }
                });

                // Add change handler for checkbox
                const checkbox = row.querySelector('.material-checkbox');
                checkbox.addEventListener('change', function() {
                    toggleMaterialSelection(material.id, checkbox.checked);
                });

                tbody.appendChild(row);
            });
        }

        function toggleMaterialSelection(materialId, isSelected) {
            if (isSelected) {
                selectedMaterials.add(materialId);
            } else {
                selectedMaterials.delete(materialId);
            }

            updateMaterialSelectionUI();
            updateStepButtons();
        }

        function toggleAllMaterials() {
            const selectAllCheckbox = document.getElementById('select-all-materials');
            const materialCheckboxes = document.querySelectorAll('.material-checkbox');

            materialCheckboxes.forEach(function(checkbox) {
                checkbox.checked = selectAllCheckbox.checked;
                toggleMaterialSelection(checkbox.dataset.materialId, selectAllCheckbox.checked);
            });
        }

        function updateMaterialSelectionUI() {
            // Update selected count
            const count = selectedMaterials.size;
            document.getElementById('selected-count').textContent = count + ' material' + (count !== 1 ? 's' : '') + ' selected';

            // Update row styling
            document.querySelectorAll('.material-row').forEach(function(row) {
                const materialId = row.dataset.materialId;
                if (selectedMaterials.has(materialId)) {
                    row.classList.add('selected');
                } else {
                    row.classList.remove('selected');
                }
            });
        }

        function updateStepButtons() {
            // Enable/disable next button based on selection
            const nextButton = document.getElementById('next-to-step-2');
            nextButton.disabled = selectedMaterials.size === 0;
        }

        function goToStep(stepNumber) {
            // Hide all step contents
            document.querySelectorAll('.step-content').forEach(function(content) {
                content.style.display = 'none';
            });

            // Show target step content
            document.getElementById('step-' + stepNumber).style.display = 'block';

            // Update step indicator
            updateStepIndicator(stepNumber);

            // Perform step-specific actions
            if (stepNumber === 2) {
                loadMaterialConfigurations();
            } else if (stepNumber === 3) {
                loadReviewSummary();
            }
        }

        function updateStepIndicator(activeStep) {
            document.querySelectorAll('.step').forEach(function(step, index) {
                const stepNum = index + 1;
                step.classList.remove('step-active', 'step-completed');

                if (stepNum < activeStep) {
                    step.classList.add('step-completed');
                } else if (stepNum === activeStep) {
                    step.classList.add('step-active');
                }
            });
        }

        function filterMaterials() {
            const searchTerm = document.getElementById('material-search').value.toLowerCase();
            const rows = document.querySelectorAll('.material-row');

            rows.forEach(function(row) {
                const materialNo = row.children[1].textContent.toLowerCase();
                const description = row.children[2].textContent.toLowerCase();

                if (materialNo.includes(searchTerm) || description.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Step 2 functions
        function loadMaterialConfigurations() {
            const container = document.getElementById('selected-materials-container');
            container.innerHTML = '<div class="text-center p-4"><iconify-icon icon="mdi:loading" class="animate-spin"></iconify-icon> Loading material configurations...</div>';

            // Get selected material IDs
            const selectedMaterialIds = Array.from(selectedMaterials);

            if (selectedMaterialIds.length === 0) {
                container.innerHTML = '<div class="alert alert-warning">No materials selected.</div>';
                return;
            }

            // Fetch inventory data for selected materials
            fetch('/RawMaterial/GetMaterialInventoryForJobRelease', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ materialIds: selectedMaterialIds })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('HTTP error! status: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log('Loaded material inventory:', data);
                renderMaterialConfigurations(data);
                updateStep2Buttons();
            })
            .catch(error => {
                console.error('Error loading material inventory:', error);
                container.innerHTML = '<div class="alert alert-danger">Failed to load material inventory. Please try again.</div>';
            });
        }

        function renderMaterialConfigurations(materialsData) {
            const container = document.getElementById('selected-materials-container');
            container.innerHTML = '';

            materialsData.forEach(function(material) {
                const materialCard = createMaterialConfigCard(material);
                container.appendChild(materialCard);
            });
        }

        function createMaterialConfigCard(material) {
            const cardDiv = document.createElement('div');
            cardDiv.className = 'material-config-card';
            cardDiv.dataset.materialId = material.id;

            const description = material.description || 'No Description';

            cardDiv.innerHTML = `
                <div class="material-config-header">
                    <div class="d-flex justify-content-between align-items-center w-100">
                        <div>
                            <h5 class="mb-1">${material.materialNo} - ${description}</h5>
                            <small class="text-muted">Balance: ${material.totalBalanceQty} items, ${material.totalBalancePallet} pallets</small>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input material-include-checkbox"
                                   id="include-${material.id}" data-material-id="${material.id}" checked>
                            <label class="form-check-label" for="include-${material.id}">Include in Release</label>
                        </div>
                    </div>
                </div>
                <div class="material-config-content" id="content-${material.id}">
                    ${createMaterialReleaseTable(material)}
                </div>
            `;

            // Add event listeners
            const includeCheckbox = cardDiv.querySelector('.material-include-checkbox');
            includeCheckbox.addEventListener('change', function() {
                toggleMaterialInclusion(material.id, this.checked);
            });

            return cardDiv;
        }

        function createMaterialReleaseTable(material) {
            return `
                <table class="table table-bordered align-middle">
                    <thead>
                        <tr>
                            <th style="width: 10%;">Select</th>
                            <th style="width: 25%;">Release Type</th>
                            <th>Pallets & Items</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${material.receives.map(function(receive) { return createReceiveRow(material.id, receive); }).join('')}
                    </tbody>
                </table>
            `;
        }

        function createReceiveRow(materialId, receive) {
            const receiveId = receive.id;
            const hasAvailableItems = receive.pallets.some(function(p) {
                return !p.isReleased || p.items.some(function(i) { return !i.isReleased; });
            });

            if (!hasAvailableItems) {
                return ''; // Skip receives with no available items
            }

            const receivedDate = new Date(receive.receivedDate).toLocaleDateString();
            const batchInfo = receive.batchNo || 'N/A';

            return `
                <tr data-material-id="${materialId}" data-receive-id="${receiveId}">
                    <td class="text-center">
                        <input type="checkbox" class="receive-checkbox"
                               data-material-id="${materialId}" data-receive-id="${receiveId}">
                    </td>
                    <td>
                        <select class="form-select release-type"
                                data-material-id="${materialId}" data-receive-id="${receiveId}" disabled>
                            <option value="Partial">Partial</option>
                            <option value="Full">Full</option>
                        </select>
                    </td>
                    <td>
                        <div class="mb-2">
                            <button type="button" class="btn btn-link btn-sm p-0 toggle-all-items"
                                    data-material-id="${materialId}" data-receive-id="${receiveId}">
                                Show All Items
                            </button>
                            <small class="text-muted ms-2">Batch: ${batchInfo} | Received: ${receivedDate}</small>
                        </div>
                        <div class="pallets-container">
                            ${receive.pallets.map(function(pallet) { return createPalletCard(materialId, receiveId, pallet); }).join('')}
                        </div>
                    </td>
                </tr>
            `;
        }

        function createPalletCard(materialId, receiveId, pallet) {
            if (pallet.isReleased && pallet.items.every(function(i) { return i.isReleased; })) {
                return ''; // Skip fully released pallets
            }

            return `
                <div class="card p-2 me-2 mb-2" style="min-width: 220px; max-width: 250px; display: inline-block;">
                    <div class="d-flex justify-content-between align-items-center mb-1">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input pallet-checkbox"
                                   id="pallet-${pallet.id}"
                                   data-material-id="${materialId}"
                                   data-receive-id="${receiveId}"
                                   data-pallet-id="${pallet.id}"
                                   data-released="${pallet.isReleased.toString().toLowerCase()}"
                                   ${pallet.isReleased ? 'checked disabled' : ''}>
                            <label class="form-check-label" for="pallet-${pallet.id}">
                                <strong>${pallet.palletCode}</strong>
                            </label>
                        </div>
                    </div>
                    <div class="pallet-items mt-2" style="display: none;">
                        <div class="card-subtitle mb-2 text-muted small">Individual Items</div>
                        <ul class="list-unstyled mb-0" style="max-height: 150px; overflow-y: auto;">
                            ${pallet.items.map(function(item) { return createItemCheckbox(materialId, receiveId, pallet.id, item); }).join('')}
                        </ul>
                    </div>
                </div>
            `;
        }

        function createItemCheckbox(materialId, receiveId, palletId, item) {
            return `
                <li class="mb-1">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input item-checkbox"
                               id="item-${item.id}"
                               data-material-id="${materialId}"
                               data-receive-id="${receiveId}"
                               data-pallet-id="${palletId}"
                               data-item-id="${item.id}"
                               data-released="${item.isReleased.toString().toLowerCase()}"
                               ${item.isReleased ? 'checked disabled' : ''}>
                        <label class="form-check-label" for="item-${item.id}">${item.itemCode}</label>
                    </div>
                </li>
            `;
        }

        function setupStep2EventListeners() {
            // Set up event delegation for dynamically created elements
            const container = document.getElementById('selected-materials-container');

            // Receive checkbox behavior
            container.addEventListener('change', function(e) {
                if (e.target.classList.contains('receive-checkbox')) {
                    handleReceiveCheckboxChange(e.target);
                }
            });

            // Release type behavior
            container.addEventListener('change', function(e) {
                if (e.target.classList.contains('release-type')) {
                    handleReleaseTypeChange(e.target);
                }
            });

            // Pallet checkbox behavior
            container.addEventListener('change', function(e) {
                if (e.target.classList.contains('pallet-checkbox')) {
                    handlePalletCheckboxChange(e.target);
                }
            });

            // Item checkbox behavior
            container.addEventListener('change', function(e) {
                if (e.target.classList.contains('item-checkbox')) {
                    handleItemCheckboxChange(e.target);
                }
            });

            // Toggle all items button
            container.addEventListener('click', function(e) {
                if (e.target.classList.contains('toggle-all-items')) {
                    toggleAllItemsForReceive(e.target);
                }
            });
        }

        function handleReceiveCheckboxChange(checkbox) {
            const materialId = checkbox.dataset.materialId;
            const receiveId = checkbox.dataset.receiveId;
            const row = checkbox.closest('tr');

            const releaseTypeSelect = row.querySelector('.release-type');
            const palletCheckboxes = row.querySelectorAll('.pallet-checkbox:not([data-released="true"])');
            const itemCheckboxes = row.querySelectorAll('.item-checkbox:not([data-released="true"])');

            if (checkbox.checked) {
                // Enable release type
                releaseTypeSelect.disabled = false;

                // If full release type, check all pallets/items
                if (releaseTypeSelect.value === 'Full') {
                    palletCheckboxes.forEach(function(cb) {
                        cb.checked = true;
                        cb.disabled = true;
                        cb.dispatchEvent(new Event('change'));
                    });
                    itemCheckboxes.forEach(function(cb) {
                        cb.checked = true;
                        cb.disabled = true;
                    });
                }
            } else {
                // Disable everything
                releaseTypeSelect.disabled = true;

                palletCheckboxes.forEach(function(cb) {
                    cb.checked = false;
                    cb.disabled = true;
                });
                itemCheckboxes.forEach(function(cb) {
                    cb.checked = false;
                    cb.disabled = true;
                });

                // Hide all item containers
                row.querySelectorAll('.pallet-items').forEach(function(container) {
                    container.style.display = 'none';
                });
            }

            updateStep2Buttons();
        }

        function handleReleaseTypeChange(select) {
            const materialId = select.dataset.materialId;
            const receiveId = select.dataset.receiveId;
            const row = select.closest('tr');

            const palletCheckboxes = row.querySelectorAll('.pallet-checkbox:not([data-released="true"])');
            const itemCheckboxes = row.querySelectorAll('.item-checkbox:not([data-released="true"])');

            if (select.value === 'Full') {
                // Check and disable all pallets/items
                palletCheckboxes.forEach(function(cb) {
                    cb.checked = true;
                    cb.disabled = true;
                    cb.dispatchEvent(new Event('change'));
                });
                itemCheckboxes.forEach(function(cb) {
                    cb.checked = true;
                    cb.disabled = true;
                });

                // Show all items for visibility
                row.querySelectorAll('.pallet-items').forEach(function(container) {
                    container.style.display = 'block';
                });
            } else {
                // Partial - enable individual selection
                palletCheckboxes.forEach(function(cb) {
                    cb.checked = false;
                    cb.disabled = false;
                    cb.dispatchEvent(new Event('change'));
                });
                itemCheckboxes.forEach(function(cb) {
                    cb.checked = false;
                    cb.disabled = false;
                });
            }
        }

        function handlePalletCheckboxChange(checkbox) {
            if (checkbox.disabled) return;

            const palletId = checkbox.dataset.palletId;
            const card = checkbox.closest('.card');
            const itemsContainer = card.querySelector('.pallet-items');
            const itemCheckboxes = card.querySelectorAll('.item-checkbox:not([data-released="true"])');

            if (checkbox.checked) {
                // Show items and check all items in this pallet
                itemsContainer.style.display = 'block';
                itemCheckboxes.forEach(function(cb) {
                    cb.checked = true;
                    cb.disabled = true;
                });
            } else {
                // Hide items and uncheck all items in this pallet
                itemsContainer.style.display = 'none';
                itemCheckboxes.forEach(function(cb) {
                    cb.checked = false;
                    cb.disabled = false;
                });
            }

            updateStep2Buttons();
        }

        function handleItemCheckboxChange(checkbox) {
            updateStep2Buttons();
        }

        function toggleAllItemsForReceive(button) {
            const materialId = button.dataset.materialId;
            const receiveId = button.dataset.receiveId;
            const row = button.closest('tr');
            const itemContainers = row.querySelectorAll('.pallet-items');

            // Count visible containers
            let visibleCount = 0;
            itemContainers.forEach(function(container) {
                if (container.style.display === 'block') {
                    visibleCount++;
                }
            });

            // Toggle visibility
            const shouldShow = visibleCount < itemContainers.length;
            itemContainers.forEach(function(container) {
                container.style.display = shouldShow ? 'block' : 'none';
            });

            button.textContent = shouldShow ? 'Hide All Items' : 'Show All Items';
        }

        function toggleMaterialInclusion(materialId, isIncluded) {
            const content = document.getElementById('content-' + materialId);
            const checkboxes = content.querySelectorAll('input[type="checkbox"]');

            if (isIncluded) {
                content.style.opacity = '1';
                content.style.pointerEvents = 'auto';
            } else {
                content.style.opacity = '0.5';
                content.style.pointerEvents = 'none';

                // Uncheck all checkboxes in this material
                checkboxes.forEach(function(cb) {
                    if (!cb.disabled) {
                        cb.checked = false;
                        cb.dispatchEvent(new Event('change'));
                    }
                });
            }

            updateStep2Buttons();
        }

        function updateStep2Buttons() {
            // Check if any items are selected across all materials
            const hasSelections = document.querySelectorAll('.material-include-checkbox:checked').length > 0 &&
                                 (document.querySelectorAll('.pallet-checkbox:checked:not([data-released="true"])').length > 0 ||
                                  document.querySelectorAll('.item-checkbox:checked:not([data-released="true"])').length > 0);

            document.getElementById('next-to-step-3').disabled = !hasSelections;
        }

        function applyGlobalSettings() {
            const globalDate = document.getElementById('global-release-date').value;
            const globalRemarks = document.getElementById('job-remarks').value;

            if (!globalDate) {
                toastr.warning('Please set a global release date first');
                return;
            }

            window.globalJobRemarks = globalRemarks;
            toastr.success('Global settings applied');
        }

        function loadReviewSummary() {
            // Collect all selections for review
            const summary = collectJobReleaseData();

            // Update summary counts
            document.getElementById('summary-material-count').textContent = summary.materialCount;
            document.getElementById('summary-pallet-count').textContent = summary.totalPallets;
            document.getElementById('summary-item-count').textContent = summary.totalItems;
            document.getElementById('summary-release-date').textContent = summary.releaseDate || 'Not set';

            // Generate detailed review
            const reviewContainer = document.getElementById('release-review-details');
            reviewContainer.innerHTML = generateDetailedReview(summary);
        }

        function collectJobReleaseData() {
            const jobData = {
                materialCount: 0,
                totalPallets: 0,
                totalItems: 0,
                releaseDate: null,
                materials: []
            };

            // Get all included materials
            const includedMaterials = document.querySelectorAll('.material-include-checkbox:checked');
            jobData.materialCount = includedMaterials.length;

            // Use the global release date
            const globalReleaseDate = document.getElementById('global-release-date').value;
            jobData.releaseDate = globalReleaseDate;

            includedMaterials.forEach(function(materialCheckbox) {
                const materialId = materialCheckbox.dataset.materialId;
                const materialCard = materialCheckbox.closest('.material-config-card');
                const materialNo = materialCard.querySelector('h5').textContent.split(' - ')[0];

                const materialData = {
                    materialId: materialId,
                    materialNo: materialNo,
                    receives: []
                };

                // Get selected receives for this material
                const selectedReceives = materialCard.querySelectorAll('.receive-checkbox:checked');

                selectedReceives.forEach(function(receiveCheckbox) {
                    const receiveId = receiveCheckbox.dataset.receiveId;
                    const row = receiveCheckbox.closest('tr');
                    const releaseType = row.querySelector('.release-type').value;

                    const receiveData = {
                        receiveId: receiveId,
                        releaseType: releaseType,
                        releaseDate: globalReleaseDate, // Use global date for all receives
                        pallets: [],
                        items: []
                    };

                    // Count selected pallets and items
                    const selectedPallets = row.querySelectorAll('.pallet-checkbox:checked:not([data-released="true"])');
                    const selectedItems = row.querySelectorAll('.item-checkbox:checked:not([data-released="true"])');

                    jobData.totalPallets += selectedPallets.length;

                    selectedPallets.forEach(function(palletCb) {
                        const palletCard = palletCb.closest('.card');
                        const palletCodeElement = palletCard.querySelector('label strong');
                        receiveData.pallets.push({
                            palletId: palletCb.dataset.palletId,
                            palletCode: palletCodeElement ? palletCodeElement.textContent : 'Unknown'
                        });
                    });

                    selectedItems.forEach(function(itemCb) {
                        // Skip items that are part of selected pallets
                        const palletId = itemCb.dataset.palletId;
                        const isPalletSelected = Array.from(selectedPallets).some(function(p) {
                            return p.dataset.palletId === palletId;
                        });

                        if (!isPalletSelected) {
                            jobData.totalItems += 1;
                            const itemLabel = itemCb.closest('.form-check').querySelector('label');
                            receiveData.items.push({
                                itemId: itemCb.dataset.itemId,
                                itemCode: itemLabel ? itemLabel.textContent : 'Unknown'
                            });
                        }
                    });

                    if (receiveData.pallets.length > 0 || receiveData.items.length > 0) {
                        materialData.receives.push(receiveData);
                    }
                });

                if (materialData.receives.length > 0) {
                    jobData.materials.push(materialData);
                }
            });

            return jobData;
        }

        function generateDetailedReview(summary) {
            if (summary.materials.length === 0) {
                return '<div class="alert alert-warning"><iconify-icon icon="lucide:alert-triangle" class="me-2"></iconify-icon>No materials or items selected for release.</div>';
            }

            let html = '<div class="job-review-summary">';

            // Add validation warnings
            const warnings = validateJobRelease(summary);
            if (warnings.length > 0) {
                html += '<div class="alert alert-warning mb-3"><h6 class="mb-2"><iconify-icon icon="lucide:alert-triangle" class="me-2"></iconify-icon>Please Review:</h6><ul class="mb-0">';
                warnings.forEach(function(warning) {
                    html += '<li>' + warning + '</li>';
                });
                html += '</ul></div>';
            }

            // Job overview
            html += `
                <div class="alert alert-info mb-3">
                    <h6 class="mb-2"><iconify-icon icon="lucide:info" class="me-2"></iconify-icon>Job Overview:</h6>
                    <div class="row">
                        <div class="col-md-3"><strong>Materials:</strong> ${summary.materialCount}</div>
                        <div class="col-md-3"><strong>Total Pallets:</strong> ${summary.totalPallets}</div>
                        <div class="col-md-3"><strong>Individual Items:</strong> ${summary.totalItems}</div>
                        <div class="col-md-3"><strong>Release Date:</strong> ${summary.releaseDate ? new Date(summary.releaseDate).toLocaleDateString() : 'Not set'}</div>
                    </div>
                </div>
            `;

            // Material breakdown
            summary.materials.forEach(function(material, index) {
                html += `
                    <div class="material-review-card mb-3">
                        <div class="card border-primary">
                            <div class="card-header bg-primary text-white">
                                <h6 class="mb-0">
                                    <iconify-icon icon="lucide:package" class="me-2"></iconify-icon>
                                    ${material.materialNo}
                                </h6>
                            </div>
                            <div class="card-body">
                `;

                let materialPallets = 0;
                let materialItems = 0;

                material.receives.forEach(function(receive, receiveIndex) {
                    materialPallets += receive.pallets.length;
                    materialItems += receive.items.length;

                    html += `
                        <div class="receive-review mb-3 ${receiveIndex > 0 ? 'border-top pt-3' : ''}">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h6 class="text-primary mb-0">
                                    <iconify-icon icon="lucide:calendar" class="me-1"></iconify-icon>
                                    Batch Release #${receiveIndex + 1}
                                </h6>
                                <span class="badge bg-${receive.releaseType === 'Full' ? 'success' : 'warning'}">${receive.releaseType}</span>
                            </div>
                            <div class="row text-sm">
                                <div class="col-md-6">
                                    <strong>Release Date:</strong> ${receive.releaseDate ? new Date(receive.releaseDate).toLocaleDateString() : 'Not set'}
                                </div>
                                <div class="col-md-6">
                                    <strong>Items:</strong> ${receive.pallets.length} pallet(s), ${receive.items.length} individual item(s)
                                </div>
                            </div>
                    `;

                    // Show pallet details
                    if (receive.pallets.length > 0) {
                        html += '<div class="mt-2"><strong>Pallets:</strong> ';
                        html += receive.pallets.map(function(pallet) {
                            return '<span class="badge bg-secondary me-1">' + pallet.palletCode + '</span>';
                        }).join('');
                        html += '</div>';
                    }

                    // Show individual item details
                    if (receive.items.length > 0) {
                        html += '<div class="mt-2"><strong>Individual Items:</strong> ';
                        html += receive.items.map(function(item) {
                            return '<span class="badge bg-light text-dark me-1">' + item.itemCode + '</span>';
                        }).join('');
                        html += '</div>';
                    }

                    html += '</div>';
                });

                html += `
                                <div class="mt-3 pt-3 border-top">
                                    <div class="row text-muted small">
                                        <div class="col-md-6">
                                            <strong>Material Total:</strong> ${materialPallets} pallets, ${materialItems} items
                                        </div>
                                        <div class="col-md-6">
                                            <strong>Receives:</strong> ${material.receives.length}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            html += '</div>';
            return html;
        }

        function validateJobRelease(summary) {
            const warnings = [];

            // Check if release date is set
            if (!summary.releaseDate) {
                warnings.push('Release date is not set. Please set a global release date in Step 2.');
            }

            // Check if release date is in the past
            if (summary.releaseDate) {
                const releaseDate = new Date(summary.releaseDate);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                releaseDate.setHours(0, 0, 0, 0);

                if (releaseDate < today) {
                    warnings.push('Release date is in the past. Please select a future date.');
                }
            }

            // Check if any materials have no receives selected
            const materialsWithoutReceives = summary.materials.filter(function(material) {
                return material.receives.length === 0;
            });

            if (materialsWithoutReceives.length > 0) {
                warnings.push('Some materials have no receives selected: ' +
                    materialsWithoutReceives.map(function(m) { return m.materialNo; }).join(', '));
            }

            // Check total items
            if (summary.totalPallets === 0 && summary.totalItems === 0) {
                warnings.push('No pallets or items selected for release.');
            }

            return warnings;
        }

        function submitJobRelease() {
            const submitButton = document.getElementById('submit-job-release');
            const originalText = submitButton.innerHTML;

            // Collect and validate job release data
            const jobReleaseData = collectJobReleaseData();

            // Validate before submission
            const warnings = validateJobRelease(jobReleaseData);
            if (warnings.length > 0) {
                let warningMessage = 'Please fix the following issues before submitting:\n\n';
                warnings.forEach(function(warning, index) {
                    warningMessage += (index + 1) + '. ' + warning + '\n';
                });

                toastr.error('Validation failed. Please check the review section.');
                alert(warningMessage);
                return;
            }

            // Show loading state
            submitButton.innerHTML = '<iconify-icon icon="mdi:loading" class="animate-spin"></iconify-icon> Creating Job Release...';
            submitButton.disabled = true;

            // Add global job remarks
            jobReleaseData.jobRemarks = window.globalJobRemarks || '';

            // Prepare submission payload
            const payload = {
                materials: jobReleaseData.materials,
                jobRemarks: jobReleaseData.jobRemarks
            };

            console.log('Submitting job release:', payload);

            // Submit to backend
            fetch('/RawMaterial/SubmitJobRelease', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val(),
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(payload)
            })
            .then(function(response) {
                if (!response.ok) {
                    return response.json().then(function(data) {
                        return Promise.reject(data);
                    });
                }
                return response.json();
            })
            .then(function(data) {
                if (data.success) {
                    toastr.success('Job release created successfully!');
                    sessionStorage.setItem('jobReleaseSuccessMessage', 'Job release created successfully! Total: ' +
                        jobReleaseData.materialCount + ' materials, ' +
                        jobReleaseData.totalPallets + ' pallets, ' +
                        jobReleaseData.totalItems + ' items.');

                    // Small delay to show success message before redirect
                    setTimeout(function() {
                        window.location.href = '/RawMaterial/JobReleases';
                    }, 1000);
                } else {
                    throw new Error(data.message || 'Failed to create job release');
                }
            })
            .catch(function(error) {
                console.error('Error submitting job release:', error);
                toastr.error(error.message || 'Failed to create job release');

                // Reset button
                submitButton.innerHTML = originalText;
                submitButton.disabled = false;
            });
        }
    </script>
}